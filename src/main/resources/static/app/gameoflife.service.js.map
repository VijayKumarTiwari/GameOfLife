{"version":3,"file":"gameoflife.service.js","sourceRoot":"","sources":["gameoflife.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAAwC,eAAe,CAAC,CAAA;AACxD,2BAA2B,iBAAiB,CAAC,CAAA;AAC7C,QAAO,kBAAkB,CAAC,CAAA;AAG1B;IAEE,2BAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;IAAG,CAAC;IAElC,kCAAM,GAAN,UAAO,IAAW,EAAE,OAAe;QACjC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,oCAAoC,GAAC,IAAI,GAAC,WAAW,GAAC,OAAO,EAAC,IAAI,CAAC;aACxE,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;IAED,uCAAW,GAAX;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,qCAAqC,CAAC;aAC1C,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;IAEO,uCAAW,GAAnB,UAAoB,GAAa;QAC/B,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;IAC1B,CAAC;IAEO,uCAAW,GAAnB,UAAoB,KAAU;QAC5B,oEAAoE;QACpE,8DAA8D;QAC9D,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;YAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;QAC1E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IA5BH;QAAC,iBAAU,EAAE;;yBAAA;IA+Bb,wBAAC;AAAD,CAAC,AA9BD,IA8BC;AA9BY,yBAAiB,oBA8B7B,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Http, Response, Headers } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport './rxjs-operators';\r\n\r\n@Injectable()\r\nexport class GameOfLifeService {\r\n\r\n  constructor(private http: Http) {}\r\n\r\n  config(size:Number, indexes: String): Observable<any> {\r\n    return this.http.post(\"http://localhost:8080/config?size=\"+size+\"&indexes=\"+indexes,null)\r\n                    .map(this.extractData)\r\n                    .catch(this.handleError);\r\n  }\r\n\r\n  calcNextGen(): Observable<any> {\r\n    return this.http.get(\"http://localhost:8080/calc-next-gen\")\r\n                    .map(this.extractData)\r\n                    .catch(this.handleError);\r\n  }\r\n\r\n  private extractData(res: Response){\r\n    return res.json() || {};\r\n  }\r\n\r\n  private handleError(error: any){\r\n    // In a real world app, we might use a remote logging infrastructure\r\n    // We'd also dig deeper into the error to get a better message\r\n    let errMsg = (error.message) ? error.message :\r\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\r\n    console.error(errMsg); // log to console instead\r\n    return Observable.throw(errMsg);\r\n  }\r\n\r\n\r\n}\r\n"]}