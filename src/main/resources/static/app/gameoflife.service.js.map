{"version":3,"file":"gameoflife.service.js","sourceRoot":"","sources":["../Users/vijayt/Vijay/gameoflife-ui/tmp/broccoli_type_script_compiler-input_base_path-1nlcaNKc.tmp/0/src/app/gameoflife.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAC3C,qBAAwC,eAAe,CAAC,CAAA;AACxD,2BAA2B,iBAAiB,CAAC,CAAA;AAC7C,QAAO,kBAAkB,CAAC,CAAA;AAG1B;IAGE,2BAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAC5B,IAAI,CAAC,OAAO,GAAG,6BAA6B,CAAC;IAC/C,CAAC;IAED,wCAAY,GAAZ;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC;aACjB,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC;aACzB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;IAEO,uCAAW,GAAnB,UAAoB,KAAU;QAC5B,oEAAoE;QACpE,8DAA8D;QAC9D,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;QACnB,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;YAC1C,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;QAC1E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IAEO,2CAAe,GAAvB,UAAwB,GAAa;QACnC,IAAI,MAAM,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACxB,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;IACtB,CAAC;IAED,0CAAc,GAAd,UAAe,IAAW,EAAE,iBAAyB;QACnD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAC,QAAQ,GAAC,IAAI,GAAC,WAAW,GAAC,iBAAiB,EAAE,IAAI,CAAC;aACpE,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;IAEO,uCAAW,GAAnB,UAAoB,GAAa;QAC/B,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC;IAC1B,CAAC;IAED,qCAAS,GAAT,UAAU,EAAS;QACjB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,GAAC,GAAG,GAAC,EAAE,CAAC;aACxB,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;IAED,uCAAW,GAAX,UAAY,EAAS;QACnB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,GAAC,GAAG,GAAC,EAAE,EAAE,IAAI,CAAC;aAC9B,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;IAED,uCAAW,GAAX,UAAY,EAAS;QACnB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,GAAC,GAAG,GAAC,EAAE,CAAC;aAC3B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;IAtDH;QAAC,iBAAU,EAAE;;yBAAA;IAwDb,wBAAC;AAAD,CAAC,AAvDD,IAuDC;AAvDY,yBAAiB,oBAuD7B,CAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Http, Response, Headers } from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport './rxjs-operators';\n\n@Injectable()\nexport class GameoflifeService {\n\n  private baseUrl:string;\n  constructor(private http: Http) {\n    this.baseUrl = \"http://localhost:8080/board\";\n  }\n\n  getScenarios(){\n    return this.http.get(this.baseUrl)\n                    .map(this.extractListData)\n                    .catch(this.handleError);\n  }\n\n  private handleError(error: any){\n    // In a real world app, we might use a remote logging infrastructure\n    // We'd also dig deeper into the error to get a better message\n    console.log(error);\n    let errMsg = (error.message) ? error.message :\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.error(errMsg); // log to console instead\n    return Observable.throw(errMsg);\n  }\n\n  private extractListData(res: Response){\n    let boards = res.json();\n    return boards || [];\n  }\n\n  configNewBoard(size:Number, initialAliveCells: String){\n    return this.http.post(this.baseUrl+\"?size=\"+size+\"&indexes=\"+initialAliveCells, null)\n                    .map(this.extractData)\n                    .catch(this.handleError);\n  }\n\n  private extractData(res: Response){\n    return res.json() || {};\n  }\n\n  loadBoard(id:String){\n    return this.http.get(this.baseUrl+\"/\"+id)\n                    .map(this.extractData)\n                    .catch(this.handleError);\n  }\n\n  calcNextGen(id:String){\n    return this.http.put(this.baseUrl+\"/\"+id, null)\n                    .map(this.extractData)\n                    .catch(this.handleError);\n  }\n\n  deleteBoard(id:String){\n    return this.http.delete(this.baseUrl+\"/\"+id)\n                    .catch(this.handleError);\n  }\n\n}\n"]}